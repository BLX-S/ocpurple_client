{"remainingRequest":"/Users/Michael/Documents/temptest/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Michael/Documents/temptest/src/views/SessionList.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/Michael/Documents/temptest/src/views/SessionList.vue","mtime":1553847554000},{"path":"/Users/Michael/Documents/temptest/node_modules/cache-loader/dist/cjs.js","mtime":1575024382845},{"path":"/Users/Michael/Documents/temptest/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Michael/Documents/temptest/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/Users/Michael/Documents/temptest/node_modules/cache-loader/dist/cjs.js","mtime":1575024382845},{"path":"/Users/Michael/Documents/temptest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { Component, Prop, Vue } from \"vue-property-decorator\";\nimport { Session, SessionGroup } from \"../store/modules/sessions\";\nimport { parse as parseDate } from \"date-fns\";\nimport SessionListFilter from \"./SessionListFilter.vue\";\n\n@Component\nexport default class SessionList extends Vue {\n  $refs!: {\n    fab: HTMLIonFabElement;\n  };\n  segment = \"all\";\n  groupedByStartTime(sessions: Session[]) {\n    return sessions\n      .sort(\n        (a, b) =>\n          parseDate(a.dateTimeStart).valueOf() -\n          parseDate(b.dateTimeStart).valueOf()\n      )\n      .reduce(\n        (groups, session) => {\n          let starterHour = parseDate(session.dateTimeStart);\n          starterHour.setMinutes(0);\n          starterHour.setSeconds(0);\n          const starterHourStr = starterHour.toJSON();\n\n          const foundGroup = groups.find(\n            group => group.startTime === starterHourStr\n          );\n          if (foundGroup) {\n            foundGroup.sessions.push(session);\n          } else {\n            groups.push({\n              startTime: starterHourStr,\n              sessions: [session]\n            });\n          }\n          return groups;\n        },\n        [] as SessionGroup[]\n      );\n  }\n\n  get allGrouped() {\n    if (this.segment === \"all\") {\n      return this.groupedByStartTime(this.$store.getters.allFiltered);\n    } else {\n      return this.groupedByStartTime(this.$store.getters.favoritesFiltered);\n    }\n  }\n\n  get queryText() {\n    return this.$store.state.sessions.searchText;\n  }\n\n  async addFavorite(event: MouseEvent, session: Session) {\n    if (\n      this.$store.state.sessions.favoriteSessions.indexOf(session.id) !== -1\n    ) {\n      // woops, they already favorited it! What shall we do!?\n      // prompt them to remove it\n      this.removeFavorite(event, session, \"Favorite already added\");\n    } else {\n      // remember this session as a user favorite\n      this.$store.dispatch(\"addFavorite\", session.id);\n\n      // create an alert instance\n      const alert = await this.$ionic.alertController.create({\n        header: \"Favorite Added\",\n        buttons: [\n          {\n            text: \"OK\",\n            handler: () => {\n              // close the sliding item\n              const slidingItem = (event.target as HTMLElement).closest(\n                \"ion-item-sliding\"\n              );\n              (<any>slidingItem).close();\n            }\n          }\n        ]\n      });\n      // now present the alert on top of all other content\n      await alert.present();\n    }\n  }\n\n  async removeFavorite(event: MouseEvent, session: Session, title: string) {\n    const alert = await this.$ionic.alertController.create({\n      header: title,\n      message: \"Would you like to remove this session from your favorites?\",\n      buttons: [\n        {\n          text: \"Cancel\",\n          handler: () => {\n            // they clicked the cancel button, do not remove the session\n            // close the sliding item and hide the option buttons\n            const slidingItem = (event.target as HTMLElement).closest(\n              \"ion-item-sliding\"\n            );\n            (<any>slidingItem).close();\n          }\n        },\n        {\n          text: \"Remove\",\n          handler: () => {\n            // they want to remove this session from their favorites\n            this.$store.dispatch(\"removeFavorite\", session.id);\n\n            // close the sliding item and hide the option buttons\n            const slidingItem = (event.target as HTMLElement).closest(\n              \"ion-item-sliding\"\n            );\n            (<any>slidingItem).close();\n          }\n        }\n      ]\n    });\n    // now present the alert on top of all other content\n    await alert.present();\n  }\n\n  goToSessionDetail(session: Session) {\n    this.$router.push({\n      name: \"session-detail\",\n      params: { sessionId: session.id.toString() }\n    });\n  }\n  async presentFilter() {\n    const modal = await this.$ionic.modalController.create({\n      component: SessionListFilter,\n      componentProps: {\n        excludedTracks: this.$store.state.sessions.trackFilters,\n        allTracks: this.$store.getters.allTracks\n      }\n    });\n    await modal.present();\n\n    const { data } = await modal.onWillDismiss();\n    if (data) {\n      this.$store.dispatch(\"updateTrackFilters\", data);\n    }\n  }\n  updateSegment(e: CustomEvent) {\n    this.segment = e.detail.value;\n  }\n  updateSearchTerm(e: CustomEvent) {\n    this.$store.dispatch(\"setSearchText\", e.detail.value);\n  }\n  async openSocial(network: string) {\n    const loading = await this.$ionic.loadingController.create({\n      message: `Posting to ${network}`,\n      duration: Math.random() * 1000 + 500\n    });\n    await loading.present();\n    await loading.onWillDismiss();\n    this.$refs.fab.close();\n  }\n}\n",{"version":3,"sources":["SessionList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+HA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SessionList.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"ion-page\">\n    <ion-header>\n      <ion-toolbar color=\"primary\">\n        <ion-buttons slot=\"start\">\n          <ion-menu-button></ion-menu-button>\n        </ion-buttons>\n\n        <ion-segment @ionChange=\"updateSegment\">\n          <ion-segment-button value=\"all\" checked=\"segment === 'all'\">All</ion-segment-button>\n          <ion-segment-button value=\"favorites\" checked=\"segment === 'favorites'\">Favorites</ion-segment-button>\n        </ion-segment>\n\n        <ion-buttons slot=\"end\">\n          <ion-button @click=\"presentFilter\">\n            <ion-icon slot=\"icon-only\" name=\"options\"></ion-icon>\n          </ion-button>\n        </ion-buttons>\n      </ion-toolbar>\n\n      <ion-toolbar color=\"primary\">\n        <ion-searchbar v-model=\"queryText\" @ionChange=\"updateSearchTerm\" placeholder=\"Search\"></ion-searchbar>\n      </ion-toolbar>\n    </ion-header>\n    <ion-content>\n      <ion-list v-show=\"allGrouped.length > 0\">\n        <ion-item-group v-for=\"group in allGrouped\" :key=\"group.id\">\n          <ion-item-divider sticky>\n            <ion-label>{{group.startTime | dateFormat(\"h:mm a\")}}</ion-label>\n          </ion-item-divider>\n\n          <ion-item-sliding\n            v-for=\"session in group.sessions\"\n            :key=\"session.id\"\n            :track=\"session.tracks[0] | lowercase\"\n          >\n            <ion-item button @click=\"goToSessionDetail(session)\">\n              <ion-label>\n                <h3>{{session.name}}</h3>\n                <p>{{session.dateTimeStart | dateFormat(\"h:mm a\")}} &mdash; {{session.dateTimeEnd | dateFormat(\"h:mm a\")}}: {{session.location}}</p>\n              </ion-label>\n            </ion-item>\n            <ion-item-options>\n              <ion-item-option\n                color=\"favorite\"\n                @click=\"addFavorite($event, session)\"\n                v-if=\"segment === 'all'\"\n              >Favorite</ion-item-option>\n              <ion-item-option\n                color=\"danger\"\n                @click=\"removeFavorite($event, session, 'Remove Favorite')\"\n                v-if=\"segment === 'favorites'\"\n              >Remove</ion-item-option>\n            </ion-item-options>\n          </ion-item-sliding>\n        </ion-item-group>\n      </ion-list>\n\n      <ion-list-header v-show=\"allGrouped.length === 0\">No Sessions Found</ion-list-header>\n\n      <ion-fab slot=\"fixed\" vertical=\"bottom\" horizontal=\"end\" ref=\"fab\">\n        <ion-fab-button ref=\"fabButton\">\n          <ion-icon name=\"share\"></ion-icon>\n        </ion-fab-button>\n        <ion-fab-list ref=\"fabList\" side=\"top\">\n          <ion-fab-button color=\"vimeo\" @click=\"openSocial('Vimeo')\">\n            <ion-icon name=\"logo-vimeo\"></ion-icon>\n          </ion-fab-button>\n          <ion-fab-button color=\"google\" @click=\"openSocial('Google+')\">\n            <ion-icon name=\"logo-googleplus\"></ion-icon>\n          </ion-fab-button>\n          <ion-fab-button color=\"twitter\" @click=\"openSocial('Twitter')\">\n            <ion-icon name=\"logo-twitter\"></ion-icon>\n          </ion-fab-button>\n          <ion-fab-button color=\"facebook\" @click=\"openSocial('Facebook')\">\n            <ion-icon name=\"logo-facebook\"></ion-icon>\n          </ion-fab-button>\n        </ion-fab-list>\n      </ion-fab>\n    </ion-content>\n  </div>\n</template>\n\n<style scoped>\nion-item-sliding[track=\"ionic\"] ion-label {\n  border-left: 2px solid var(--ion-color-primary);\n  padding-left: 10px;\n}\nion-item-sliding[track=\"angular\"] ion-label {\n  border-left: 2px solid var(--ion-color-angular);\n  padding-left: 10px;\n}\nion-item-sliding[track=\"communication\"] ion-label {\n  border-left: 2px solid var(--ion-color-communication);\n  padding-left: 10px;\n}\nion-item-sliding[track=\"tooling\"] ion-label {\n  border-left: 2px solid var(--ion-color-tooling);\n  padding-left: 10px;\n}\nion-item-sliding[track=\"services\"] ion-label {\n  border-left: 2px solid var(--ion-color-services);\n  padding-left: 10px;\n}\nion-item-sliding[track=\"design\"] ion-label {\n  border-left: 2px solid var(--ion-color-design);\n  padding-left: 10px;\n}\nion-item-sliding[track=\"workshop\"] ion-label {\n  border-left: 2px solid var(--ion-color-workshop);\n  padding-left: 10px;\n}\nion-item-sliding[track=\"food\"] ion-label {\n  border-left: 2px solid var(--ion-color-food);\n  padding-left: 10px;\n}\nion-item-sliding[track=\"documentation\"] ion-label {\n  border-left: 2px solid var(--ion-color-documentation);\n  padding-left: 10px;\n}\nion-item-sliding[track=\"navigation\"] ion-label {\n  border-left: 2px solid var(--ion-color-navigation);\n  padding-left: 10px;\n}\n</style>\n\n<script lang=\"ts\">\nimport { Component, Prop, Vue } from \"vue-property-decorator\";\nimport { Session, SessionGroup } from \"../store/modules/sessions\";\nimport { parse as parseDate } from \"date-fns\";\nimport SessionListFilter from \"./SessionListFilter.vue\";\n\n@Component\nexport default class SessionList extends Vue {\n  $refs!: {\n    fab: HTMLIonFabElement;\n  };\n  segment = \"all\";\n  groupedByStartTime(sessions: Session[]) {\n    return sessions\n      .sort(\n        (a, b) =>\n          parseDate(a.dateTimeStart).valueOf() -\n          parseDate(b.dateTimeStart).valueOf()\n      )\n      .reduce(\n        (groups, session) => {\n          let starterHour = parseDate(session.dateTimeStart);\n          starterHour.setMinutes(0);\n          starterHour.setSeconds(0);\n          const starterHourStr = starterHour.toJSON();\n\n          const foundGroup = groups.find(\n            group => group.startTime === starterHourStr\n          );\n          if (foundGroup) {\n            foundGroup.sessions.push(session);\n          } else {\n            groups.push({\n              startTime: starterHourStr,\n              sessions: [session]\n            });\n          }\n          return groups;\n        },\n        [] as SessionGroup[]\n      );\n  }\n\n  get allGrouped() {\n    if (this.segment === \"all\") {\n      return this.groupedByStartTime(this.$store.getters.allFiltered);\n    } else {\n      return this.groupedByStartTime(this.$store.getters.favoritesFiltered);\n    }\n  }\n\n  get queryText() {\n    return this.$store.state.sessions.searchText;\n  }\n\n  async addFavorite(event: MouseEvent, session: Session) {\n    if (\n      this.$store.state.sessions.favoriteSessions.indexOf(session.id) !== -1\n    ) {\n      // woops, they already favorited it! What shall we do!?\n      // prompt them to remove it\n      this.removeFavorite(event, session, \"Favorite already added\");\n    } else {\n      // remember this session as a user favorite\n      this.$store.dispatch(\"addFavorite\", session.id);\n\n      // create an alert instance\n      const alert = await this.$ionic.alertController.create({\n        header: \"Favorite Added\",\n        buttons: [\n          {\n            text: \"OK\",\n            handler: () => {\n              // close the sliding item\n              const slidingItem = (event.target as HTMLElement).closest(\n                \"ion-item-sliding\"\n              );\n              (<any>slidingItem).close();\n            }\n          }\n        ]\n      });\n      // now present the alert on top of all other content\n      await alert.present();\n    }\n  }\n\n  async removeFavorite(event: MouseEvent, session: Session, title: string) {\n    const alert = await this.$ionic.alertController.create({\n      header: title,\n      message: \"Would you like to remove this session from your favorites?\",\n      buttons: [\n        {\n          text: \"Cancel\",\n          handler: () => {\n            // they clicked the cancel button, do not remove the session\n            // close the sliding item and hide the option buttons\n            const slidingItem = (event.target as HTMLElement).closest(\n              \"ion-item-sliding\"\n            );\n            (<any>slidingItem).close();\n          }\n        },\n        {\n          text: \"Remove\",\n          handler: () => {\n            // they want to remove this session from their favorites\n            this.$store.dispatch(\"removeFavorite\", session.id);\n\n            // close the sliding item and hide the option buttons\n            const slidingItem = (event.target as HTMLElement).closest(\n              \"ion-item-sliding\"\n            );\n            (<any>slidingItem).close();\n          }\n        }\n      ]\n    });\n    // now present the alert on top of all other content\n    await alert.present();\n  }\n\n  goToSessionDetail(session: Session) {\n    this.$router.push({\n      name: \"session-detail\",\n      params: { sessionId: session.id.toString() }\n    });\n  }\n  async presentFilter() {\n    const modal = await this.$ionic.modalController.create({\n      component: SessionListFilter,\n      componentProps: {\n        excludedTracks: this.$store.state.sessions.trackFilters,\n        allTracks: this.$store.getters.allTracks\n      }\n    });\n    await modal.present();\n\n    const { data } = await modal.onWillDismiss();\n    if (data) {\n      this.$store.dispatch(\"updateTrackFilters\", data);\n    }\n  }\n  updateSegment(e: CustomEvent) {\n    this.segment = e.detail.value;\n  }\n  updateSearchTerm(e: CustomEvent) {\n    this.$store.dispatch(\"setSearchText\", e.detail.value);\n  }\n  async openSocial(network: string) {\n    const loading = await this.$ionic.loadingController.create({\n      message: `Posting to ${network}`,\n      duration: Math.random() * 1000 + 500\n    });\n    await loading.present();\n    await loading.onWillDismiss();\n    this.$refs.fab.close();\n  }\n}\n</script>\n"]}]}