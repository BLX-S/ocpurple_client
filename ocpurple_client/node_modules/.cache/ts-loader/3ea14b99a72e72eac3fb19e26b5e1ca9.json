{"remainingRequest":"/Users/Michael/Documents/temptest/node_modules/babel-loader/lib/index.js!/Users/Michael/Documents/temptest/node_modules/ts-loader/index.js??ref--13-2!/Users/Michael/Documents/temptest/src/store/modules/sessions.ts","dependencies":[{"path":"/Users/Michael/Documents/temptest/src/store/modules/sessions.ts","mtime":1553847554000},{"path":"/Users/Michael/Documents/temptest/node_modules/cache-loader/dist/cjs.js","mtime":1575024382845},{"path":"/Users/Michael/Documents/temptest/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Michael/Documents/temptest/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/Michael/Documents/temptest/node_modules/@babel/runtime/helpers/builtin/es6/asyncToGenerator\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport { parse as parseDate } from 'date-fns';\nvar defaultState = {\n  searchText: '',\n  trackFilters: [],\n  sessions: [],\n  favoriteSessions: []\n};\nvar sessionStore = {\n  state: defaultState,\n  mutations: {\n    updateSessions: function updateSessions(state, sessions) {\n      state.sessions = sessions;\n    },\n    setSearchText: function setSearchText(state, searchText) {\n      state.searchText = searchText;\n    },\n    addTrackFilter: function addTrackFilter(state, trackName) {\n      if (!state.trackFilters.includes(trackName)) {\n        state.trackFilters.push(trackName);\n      }\n    },\n    removeTrackFilter: function removeTrackFilter(state, trackName) {\n      state.trackFilters = state.trackFilters.filter(function (tn) {\n        return tn !== trackName;\n      });\n    },\n    updateTrackFilters: function updateTrackFilters(state, trackNames) {\n      state.trackFilters = trackNames;\n    },\n    addFavorite: function addFavorite(state, sessionId) {\n      if (!state.favoriteSessions.includes(sessionId)) {\n        state.favoriteSessions.push(sessionId);\n      }\n    },\n    removeFavorite: function removeFavorite(state, sessionId) {\n      state.favoriteSessions = state.favoriteSessions.filter(function (fsId) {\n        return fsId !== sessionId;\n      });\n    },\n    updateFavoriteFilter: function updateFavoriteFilter(state, sessionIds) {\n      state.favoriteSessions = sessionIds;\n    }\n  },\n  actions: {\n    loadSessionData: function () {\n      var _loadSessionData = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(_ref) {\n        var commit, response, data;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                commit = _ref.commit;\n                _context.next = 3;\n                return fetch('/data/sessions.json');\n\n              case 3:\n                response = _context.sent;\n                _context.next = 6;\n                return response.json();\n\n              case 6:\n                data = _context.sent;\n                commit('updateSessions', data);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function loadSessionData(_x) {\n        return _loadSessionData.apply(this, arguments);\n      };\n    }(),\n    setSearchText: function setSearchText(_ref2, searchText) {\n      var commit = _ref2.commit;\n      commit('setSearchText', searchText);\n    },\n    addTrackFilter: function addTrackFilter(_ref3, trackName) {\n      var commit = _ref3.commit;\n      commit('addTrackFilter', trackName);\n    },\n    removeTrackFilter: function removeTrackFilter(_ref4, trackName) {\n      var commit = _ref4.commit;\n      commit('removeTrackFilter', trackName);\n    },\n    updateTrackFilters: function updateTrackFilters(_ref5, trackNames) {\n      var commit = _ref5.commit;\n      commit('updateTrackFilters', trackNames);\n    },\n    addFavorite: function addFavorite(_ref6, sessionId) {\n      var commit = _ref6.commit;\n      commit('addFavorite', sessionId);\n    },\n    removeFavorite: function removeFavorite(_ref7, sessionId) {\n      var commit = _ref7.commit;\n      commit('removeFavorite', sessionId);\n    },\n    updateFavoriteFilter: function updateFavoriteFilter(_ref8, sessionIds) {\n      var commit = _ref8.commit;\n      commit('updateFavoriteFilter', sessionIds);\n    }\n  },\n  getters: {\n    conferenceStart: function conferenceStart(state) {\n      var firstSession = state.sessions.concat().sort(function (a, b) {\n        return parseDate(a.dateTimeStart).valueOf() - parseDate(b.dateTimeStart).valueOf();\n      })[0];\n      return firstSession ? firstSession.dateTimeStart : null;\n    },\n    allTracks: function allTracks(state) {\n      return state.sessions.reduce(function (all, session) {\n        return all.concat(session.tracks);\n      }, []).filter(function (trackName, index, array) {\n        return array.indexOf(trackName) === index;\n      }).sort();\n    },\n    allFiltered: function allFiltered(state) {\n      var searchSessions = searchText(state.searchText);\n      var searchTracks = filterByTrack(state.trackFilters);\n      return state.sessions.filter(searchSessions).filter(searchTracks);\n    },\n    favoritesFiltered: function favoritesFiltered(state) {\n      var searchSessions = searchText(state.searchText);\n      var searchTracks = filterByTrack(state.trackFilters);\n\n      function isFavorite(session) {\n        return state.favoriteSessions.indexOf(session.id) !== -1;\n      }\n\n      return state.sessions.filter(isFavorite).filter(searchSessions).filter(searchTracks);\n    }\n  }\n};\n\nfunction searchText(searchText) {\n  if (!searchText) {\n    return function () {\n      return true;\n    };\n  }\n\n  var lowerSearchText = searchText.toLowerCase();\n  return function (session) {\n    return session.name.toLowerCase().indexOf(lowerSearchText) !== -1;\n  };\n}\n\nfunction filterByTrack(trackFilters) {\n  if (trackFilters.length === 0) {\n    return function () {\n      return true;\n    };\n  }\n\n  return function (session) {\n    return session.tracks.some(function (sessionTrackName) {\n      return trackFilters.some(function (trackName) {\n        return trackName === sessionTrackName;\n      });\n    });\n  };\n}\n\nexport default sessionStore;",{"version":3,"sources":["/Users/Michael/Documents/temptest/src/store/modules/sessions.ts"],"names":[],"mappings":"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","sourcesContent":["import { Module } from 'vuex';\nimport { parse as parseDate } from 'date-fns';\n\nexport interface Session {\n  id: number,\n  dateTimeStart: string,\n  dateTimeEnd: string,\n  name: string,\n  location: string,\n  description: string,\n  speakerIds: number[],\n  tracks: string[]\n}\n\nexport interface SessionState {\n  searchText: string;\n  trackFilters: string[];\n  sessions: Session[];\n  favoriteSessions: number[];\n}\n\nexport interface SessionGroup {\n  startTime: string,\n  sessions: Session[]\n}\n\nconst defaultState: SessionState = {\n  searchText: '',\n  trackFilters: [],\n  sessions: [],\n  favoriteSessions: []\n}\n\nconst sessionStore: Module<SessionState, {}> = {\n  state: defaultState,\n  mutations: {\n    updateSessions(state, sessions: Session[]) {\n      state.sessions = sessions;\n    },\n    setSearchText(state, searchText: string) {\n      state.searchText = searchText;\n    },\n    addTrackFilter(state, trackName: string) {\n      if (!state.trackFilters.includes(trackName)) {\n        state.trackFilters.push(trackName)\n      }\n    },\n    removeTrackFilter(state, trackName: string) {\n      state.trackFilters = state.trackFilters.filter(tn => tn !== trackName);\n    },\n    updateTrackFilters(state, trackNames: string[]) {\n      state.trackFilters = trackNames;\n    },\n    addFavorite(state, sessionId: number) {\n      if (!state.favoriteSessions.includes(sessionId)) {\n        state.favoriteSessions.push(sessionId);\n      }\n    },\n    removeFavorite(state, sessionId: number) {\n      state.favoriteSessions = state.favoriteSessions.filter(fsId => fsId !== sessionId);\n    },\n    updateFavoriteFilter(state, sessionIds: number[]) {\n      state.favoriteSessions = sessionIds;\n    }\n  },\n  actions: {\n    async loadSessionData({ commit }) {\n      const response = await fetch('/data/sessions.json');\n      const data = await response.json();\n      commit('updateSessions', data);\n    },\n    setSearchText({ commit }, searchText: string) {\n      commit('setSearchText', searchText)\n    },\n    addTrackFilter({ commit }, trackName: string) {\n      commit('addTrackFilter', trackName);\n    },\n    removeTrackFilter({ commit }, trackName: string) {\n      commit('removeTrackFilter', trackName);\n    },\n    updateTrackFilters({ commit }, trackNames: string[]) {\n      commit('updateTrackFilters', trackNames);\n    },\n    addFavorite({ commit }, sessionId: number) {\n      commit('addFavorite', sessionId);\n    },\n    removeFavorite({ commit }, sessionId: number) {\n      commit('removeFavorite', sessionId);\n    },\n    updateFavoriteFilter({ commit }, sessionIds: number[]) {\n      commit('updateFavoriteFilter', sessionIds);\n    },\n  },\n  getters: {\n    conferenceStart(state) {\n      const firstSession = state.sessions\n        .concat()\n        .sort((a, b) => (\n          parseDate(a.dateTimeStart).valueOf() - parseDate(b.dateTimeStart).valueOf()\n        ))[0];\n      return firstSession ? firstSession.dateTimeStart : null;\n    },\n    allTracks(state) {\n      return state.sessions\n        .reduce((all, session) => all.concat(session.tracks), <string[]>[])\n        .filter((trackName, index, array) => array.indexOf(trackName) === index)\n        .sort();\n    },\n    allFiltered(state) {\n      let searchSessions = searchText(state.searchText);\n      let searchTracks = filterByTrack(state.trackFilters);\n\n      return state.sessions\n        .filter(searchSessions)\n        .filter(searchTracks);\n    },\n    favoritesFiltered(state) {\n      let searchSessions = searchText(state.searchText);\n      let searchTracks = filterByTrack(state.trackFilters);\n\n      function isFavorite(session: Session) {\n        return state.favoriteSessions.indexOf(session.id) !== -1;\n      }\n\n      return state.sessions\n        .filter(isFavorite)\n        .filter(searchSessions)\n        .filter(searchTracks);\n    }\n  }\n};\n\nfunction searchText(searchText: string) {\n  if (!searchText) {\n    return () => true;\n  }\n  const lowerSearchText = searchText.toLowerCase();\n  return (session: Session) => session.name.toLowerCase().indexOf(lowerSearchText) !== -1;\n}\n\nfunction filterByTrack(trackFilters: string[]) {\n  if (trackFilters.length === 0) {\n    return () => true;\n  }\n  return (session: Session) => (\n    session.tracks.some(sessionTrackName => (\n      trackFilters.some(trackName => trackName === sessionTrackName)\n    ))\n  );\n}\n\nexport default sessionStore;\n"],"sourceRoot":""}]}