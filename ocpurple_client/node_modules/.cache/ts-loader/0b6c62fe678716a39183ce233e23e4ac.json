{"remainingRequest":"/Users/Michael/Documents/GIT/ocpurple_client/ocpurple_client/node_modules/babel-loader/lib/index.js!/Users/Michael/Documents/GIT/ocpurple_client/ocpurple_client/node_modules/ts-loader/index.js??ref--13-2!/Users/Michael/Documents/GIT/ocpurple_client/ocpurple_client/src/store/modules/locations.ts","dependencies":[{"path":"/Users/Michael/Documents/GIT/ocpurple_client/ocpurple_client/src/store/modules/locations.ts","mtime":1553847554000},{"path":"/Users/Michael/Documents/GIT/ocpurple_client/ocpurple_client/node_modules/cache-loader/dist/cjs.js","mtime":1575024382845},{"path":"/Users/Michael/Documents/GIT/ocpurple_client/ocpurple_client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Michael/Documents/GIT/ocpurple_client/ocpurple_client/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/Michael/Documents/GIT/ocpurple_client/ocpurple_client/node_modules/@babel/runtime/helpers/builtin/es6/asyncToGenerator\";\nvar locationStore = {\n  state: {\n    mapCenterId: 1,\n    locations: []\n  },\n  mutations: {\n    updateLocations: function updateLocations(state, locations) {\n      state.locations = locations;\n    }\n  },\n  actions: {\n    loadLocationData: function () {\n      var _loadLocationData = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(_ref) {\n        var commit, response, data;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                commit = _ref.commit;\n                _context.next = 3;\n                return fetch('/data/locations.json');\n\n              case 3:\n                response = _context.sent;\n                _context.next = 6;\n                return response.json();\n\n              case 6:\n                data = _context.sent;\n                commit('updateLocations', data);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function loadLocationData(_x) {\n        return _loadLocationData.apply(this, arguments);\n      };\n    }()\n  },\n  getters: {\n    mapCenter: function mapCenter(state) {\n      return state.locations.find(function (l) {\n        return l.id === state.mapCenterId;\n      });\n    },\n    allLocations: function allLocations(state) {\n      return state.locations.filter(function (l) {\n        return l.id !== state.mapCenterId;\n      });\n    }\n  }\n};\nexport default locationStore;",{"version":3,"sources":["/Users/Michael/Documents/GIT/ocpurple_client/ocpurple_client/src/store/modules/locations.ts"],"names":[],"mappings":";;;AAcA,IAAM,gBAA2C;AAC/C,SAAO;AACL,iBAAa,CADR;AAEL,eAAW;AAFN,GADwC;AAK/C,aAAW;AACT,mBADS,2BACO,KADP,EACc,SADd,EACmC;AAC1C,YAAM,SAAN,GAAkB,SAAlB;AACD;AAHQ,GALoC;AAU/C,WAAS;AACD,oBADC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACkB,sBADlB,QACkB,MADlB;AAAA;AAAA,uBAEkB,MAAM,sBAAN,CAFlB;;AAAA;AAEC,wBAFD;AAAA;AAAA,uBAGc,SAAS,IAAT,EAHd;;AAAA;AAGC,oBAHD;AAIL,uBAAO,iBAAP,EAA0B,IAA1B;;AAJK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,GAVsC;AAiB/C,WAAS;AACP,aADO,qBACG,KADH,EACQ;AACb,aAAO,MAAM,SAAN,CAAgB,IAAhB,CAAqB;AAAA,eAAK,EAAE,EAAF,KAAS,MAAM,WAApB;AAAA,OAArB,CAAP;AACD,KAHM;AAIP,gBAJO,wBAIM,KAJN,EAIW;AAChB,aAAO,MAAM,SAAN,CAAgB,MAAhB,CAAuB;AAAA,eAAK,EAAE,EAAF,KAAS,MAAM,WAApB;AAAA,OAAvB,CAAP;AACD;AANM;AAjBsC,CAAjD;AA2BA,eAAe,aAAf","sourcesContent":["import { Module } from 'vuex';\n\nexport interface Location {\n  id: number;\n  name?: string;\n  lat: number;\n  lng: number;\n}\n\nexport interface LocationState {\n  mapCenterId: number\n  locations: Location[]\n}\n\nconst locationStore: Module<LocationState, {}> = {\n  state: {\n    mapCenterId: 1,\n    locations: []\n  },\n  mutations: {\n    updateLocations(state, locations: Location[]) {\n      state.locations = locations;\n    },\n  },\n  actions: {\n    async loadLocationData({ commit }) {\n      const response = await fetch('/data/locations.json');\n      const data = await response.json();\n      commit('updateLocations', data);\n    }\n  },\n  getters: {\n    mapCenter(state) {\n      return state.locations.find(l => l.id === state.mapCenterId)\n    },\n    allLocations(state) {\n      return state.locations.filter(l => l.id !== state.mapCenterId)\n    }\n  }\n};\n\nexport default locationStore;\n"],"sourceRoot":""}]}